service: ${file(./../../constants.yml):NAME}-example-service

# endpoints
functions:
  exampleCreate:
    handler: handler.exampleCreate
    events:
      - http:
          path: example
          method: post
          cors: true
      - schedule:
          name: ${file(./../../constants.yml):NAME}-exampleCreate-${opt:stage, 'dev'}
          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}
          enabled: ${file(./../../constants.yml):AWS_WARMUP}
          input:
            warmup: true
  exampleGet:
    handler: handler.exampleGet
    events:
      - http:
          path: example/{id}
          method: get
          cors: true
      - schedule:
          name: ${file(./../../constants.yml):NAME}-exampleGet-${opt:stage, 'dev'}
          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}
          enabled: ${file(./../../constants.yml):AWS_WARMUP}
          input:
            warmup: true
  exampleList:
    handler: handler.exampleList
    events:
      - http:
          path: example
          method: get
          cors: true
      - schedule:
          name: ${file(./../../constants.yml):NAME}-exampleList-${opt:stage, 'dev'}
          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}
          enabled: ${file(./../../constants.yml):AWS_WARMUP}
          input:
            warmup: true
  exampleUpdate:
    handler: handler.exampleUpdate
    events:
      - http:
          path: example/{id}
          method: put
          cors: true
      - schedule:
          name: ${file(./../../constants.yml):NAME}-exampleUpdate-${opt:stage, 'dev'}
          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}
          enabled: ${file(./../../constants.yml):AWS_WARMUP}
          input:
            warmup: true
  exampleDelete:
    handler: handler.exampleDelete
    events:
      - http:
          path: example/{id}
          method: delete
          cors: true
      - schedule:
          name: ${file(./../../constants.yml):NAME}-exampleDelete-${opt:stage, 'dev'}
          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}
          enabled: ${file(./../../constants.yml):AWS_WARMUP}
          input:
            warmup: true

# config
provider:
  name: aws
  runtime: ${file(./../../constants.yml):NODE_VERSION}
  stage: ${opt:stage, 'dev'}
  role: ${file(./../../serverless.env.yml):AWS_ROLE}
  memorySize: ${file(./../../constants.yml):AWS_MEMORY}
  timeout: ${file(./../../constants.yml):AWS_TIMEOUT}
  vpc:
    securityGroupIds:
      - ${file(./../../serverless.env.yml):VPC_SECURITY}
    subnetIds:
      - ${file(./../../serverless.env.yml):VPC_SUBNET1}
      - ${file(./../../serverless.env.yml):VPC_SUBNET2}
      - ${file(./../../serverless.env.yml):VPC_SUBNET3}
      - ${file(./../../serverless.env.yml):VPC_SUBNET4}
  apiGateway:
    restApiId: ${file(./../../serverless.env.yml):AWS_API_ID_${self:custom.environments.${self:provider.stage}}}
    restApiRootResourceId: ${file(./../../serverless.env.yml):AWS_API_ROOT_ID_${self:custom.environments.${self:provider.stage}}}
  environment:
    STAGE: ${self:provider.stage}
    DB_HOST: ${file(./../../serverless.env.yml):DB_HOST}
    DB_USER: ${file(./../../serverless.env.yml):DB_USER}
    DB_PASS: ${file(./../../serverless.env.yml):DB_PASS}
    DB_NAME: ${file(./../../serverless.env.yml):DB_NAME}

plugins:
  - serverless-webpack

custom:
  environments:
    dev: DEV
    prod: PROD
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
